SYMBOLS {
    __LOADADDR__:  type = import;
    __EXEHDR__:    type = import;
    __STACKSIZE__: type = weak, value = $0800; # 2k stack
	__SIDSTART__:  type = weak, value = $2400;
	__SIDSIZE__:   type = weak, value = $0C00;       
	__GFXSTART__:  type = weak, value = $3000;
	__GFXSIZE__:   type = weak, value = $1000;        
}
MEMORY {
    ZP:       file = "", define = yes, start = $0002, size = $001A;
    LOADADDR: file = %O,               start = $1BFF, size = $0002;
    HEADER:   file = %O, define = yes, start = $1C01, size = $000C;
    EXTRA:    file = %O, define = yes, start = __HEADER_LAST__,  size = __SIDSTART__ - __HEADER_LAST__, fill = yes, fillval=$2A;
    SID:      file = %O, define = yes, start = __SIDSTART__,     size = __SIDSIZE__, type = rw,  fill = yes, fillval=$2B;   
    GFX:      file = %O, define = yes, start = __GFXSTART__,     size = __GFXSIZE__, type = rw,  fill = yes, fillval=$2C;
    MAIN:     file = %O, define = yes, start = $4000, type = rw, size = $8000 - __STACKSIZE__; 
}
SEGMENTS {
    ZEROPAGE: load = ZP,       type = zp;
    LOADADDR: load = LOADADDR, type = ro;
    EXEHDR:   load = HEADER,   type = ro;
    STARTUP:  load = EXTRA,    type = ro;
    LOWCODE:  load = MAIN,     type = ro,  optional = yes;
    ONCE:     load = MAIN,     type = ro,  optional = yes;
    CODE:     load = EXTRA,    type = ro;
    CODE2:    load = MAIN,     type = ro;
    SID:      load = SID,      type = ro;
    RODATA:   load = MAIN,     type = ro;
    DATA:     load = MAIN,     type = rw;
    INIT:     load = MAIN,     type = bss;
    GFX:      load = GFX,      type = rw;    
    BSS:      load = MAIN,     type = bss, define   = yes;
}
FEATURES {
    CONDES: type    = constructor,
            label   = __CONSTRUCTOR_TABLE__,
            count   = __CONSTRUCTOR_COUNT__,
            segment = ONCE;
    CONDES: type    = destructor,
            label   = __DESTRUCTOR_TABLE__,
            count   = __DESTRUCTOR_COUNT__,
            segment = RODATA;
    CONDES: type    = interruptor,
            label   = __INTERRUPTOR_TABLE__,
            count   = __INTERRUPTOR_COUNT__,
            segment = RODATA,
            import  = __CALLIRQ__;
}
